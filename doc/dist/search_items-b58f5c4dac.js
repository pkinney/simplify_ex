searchNodes=[{"ref":"Simplify.html","title":"Simplify","type":"module","doc":"Implementation of the Ramer–Douglas–Peucker algorithm for reducing the number of points used to represent a curve. The Simplify module contains a function simplify that accepts a List of coordinates, each coordinate being a tuple {x, y}, and a tolerance. The function reduces the number of points by removing points that are less than the tolerance away from the simplified curve. points = [{0, 0}, {0.05, 0.05}, {-0.05, 0.5}, {0, 1}, {0.05, 1.1}, {1, 1}, {0.5, 0.5}, {0, 0.0001}] Simplify.simplify(points, 0.1) # =&gt; [{0, 0}, {0.05, 1.1}, {1, 1}, {0, 0.0001}] The method will also take a Geo.LineString struct as created by the conversion functions in the Geo project (https://github.com/bryanjos/geo). This allows for easy import of GeoJSON or WKT/WKB formats. This version of the function returns a Geo.LineString of the simplified curve. &quot;{&quot;type&quot;:&quot;LineString&quot;:&quot;coordinates&quot;:[[0,0],[0.05,0.05],[-0.05,0.5],[0,1],[0.05,1.1],[1,1],[0.5,0.5],[0,0.0001]]&quot; |&gt; Jason.decode! |&gt; Geo.JSON.decode |&gt; Simplify.simplify(0.1) |&gt; Geo.JSON.encode |&gt; Jason.encode! # =&gt; &quot;{&quot;coordinates&quot;:[[0,0],[0.05,1.1],[1,1],[0,0.0001]],&quot;type&quot;:&quot;LineString&quot;}&quot;"},{"ref":"Simplify.html#simplify/2","title":"Simplify.simplify/2","type":"function","doc":""},{"ref":"Simplify.html#t:point/0","title":"Simplify.point/0","type":"type","doc":""}]